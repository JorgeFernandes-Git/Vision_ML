% Jorge Fernandes
% 104580
% April 2022
%
% ************************************************************************
%   This function script is design to read a sequence of images 
%   full of dominos, dices, and play cards, extracted them and sort them.
%   The results are written on a .txt file generated by the function 
%   on the same directory under the name tp1_104580.txt 
%   The function outputs 104580 to the terminal
% ************************************************************************
%
%   NOTE THAT: THE SEQUENCE OF IMAGE MUST RESPECT THE NAME
%   'svpi2022_TP1_img_*_*.png' WHERE '*' MUST BE A NUMBER.
%   THE IMAGES MUST BE PLACED ON A DIRECTORY ABOVE THE SCRIPT FOLDER.

function NumMec = tp1_104580()
    try
        NumMec = 104580; % my number
        delete(['tp1_' num2str(NumMec) '.txt']); % delete last file
    
        path='../'; % path to test img
        files_list = dir([path 'svpi2022_TP1_img_*_*.png']);
        num_files = size(files_list, 1); % tot num of files encontered
    
        for file=1:num_files % go through  all files
    
            % variables
            NumSeq = 0;     % seq number, from read file
            NumImg = 0;     % num img, from read file
            tDom = 0;       % total num of dominos
            tDice = 0;      % total num of dices
            tCard = 0;      % total num of cards
            RDO = 0;        % total num of dominos on horizontal
            RFO = 0;        % total num of dices on on regular position (not tilted)
            tDuplas = 0;    % sum of dominos doubles
            PntDom = 0;     % sum of all dots on dominos
            PntDad = 0;     % sum of all dots on dices
            CopOuros=0;     % sum of all red cards
            EspPaus=0;      % sum of all black cards
            Ouros=0;        % sum of diamons
            StringPT='';    % text to file
    
            suit_value = []; % array of suit, NOTE: its causing a warning related to the memory?!
    
            file_path = files_list(file).name; % get path
            test_img = im2double(imread([path file_path])); % convert to double (gray img 0.0 to 1.0)
    
            NumSeq=str2double(file_path(strlength(file_path)-9:strlength(file_path)-7));
            NumImg=str2double(file_path(strlength(file_path)-5:strlength(file_path)-4));
            
            % start by finding objects on image
            % invert img and use imfill
            BG = ~test_img; % BG - backgroung
            BG = imfill(BG, 'holes');
            [LLT, NNT] = bwlabel(BG); % LLT - obj; NNT - number of objs found
    
            debug_mode = 0; % show imgs flag, for debugging
            for i=1:NNT
                try
                    img_is_tilted = 0; % reset flag
                    img_original_is_horizonal = 0; % reset flag
    
                    % extract sub images
                    sub_img = (LLT == i);
                    [xt,yt] = find(sub_img);
                    regions = test_img(min(xt):max(xt), min(yt):max(yt));
                    sub_img_to_process = regions;
                    sub_img_original = sub_img_to_process;
                    sub_img_to_process = sub_img_to_process(4:end-4, 4:end-4);
                    sub_img_to_process = wiener2(sub_img_to_process,[2 2]);
    
                    if debug_mode == true
                        figure(1);imshow(sub_img_original)
                        figure(50);imshow(sub_img_to_process)
                        %                     subplot(121);imshow(sub_img_to_process)
                        %                     subplot(122); imhist(sub_img_to_process)
                    end
    
                    % ******* START PROCESSING ******** %
                    [h, w, d] = size(sub_img_to_process); % height, width, dimension
       
                    if h < w % obj on horizontal position needs rotation
                        img_original_is_horizonal = 1;
                        sub_img_to_process = imrotate(sub_img_to_process, -90);
                        [h, w, d] = size(sub_img_to_process); % height, width, dimension
                    end

                    copy_sub_img_to_process = sub_img_to_process;

                    % AUTO BIN
                    bin_sub_img = autobin(copy_sub_img_to_process);
                    n_px_rem = ceil(h/w*25);
                    bin_sub_img = bwareaopen(bin_sub_img, n_px_rem);
                    
                    if debug_mode == true
                        figure(2);imshow(bin_sub_img)
                    end

%                        disp("NNZ bin: " + nnz(bin_sub_img))
                    if nnz(bin_sub_img) < 63
                        if h/w > 1.6 % dominos extremely black!!!
                            sub_img_to_process = imadjust(sub_img_to_process, [0.0 0.2], []);
                            bin_sub_img = autobin(sub_img_to_process);
                            %                         figure(255); imshow(sub_img_to_process)
                            if nnz(bin_sub_img) > 0
                                domino_part_1 = bin_sub_img(4:ceil(h/2)-4, 1:w);
                                domino_part_2 = bin_sub_img(ceil(h/2)+4:h-4, 1:w);
                                se = strel('disk',10);
                                domino_part_1 = imclose(domino_part_1,se);
                                domino_part_2 = imclose(domino_part_2,se);
                                
                                se = strel('disk',2);
                                domino_part_1 = imdilate(domino_part_1,se);
                                domino_part_2 = imdilate(domino_part_2,se);

                                if debug_mode == 1
                                    figure(7); imshow(domino_part_1)
                                    figure(8); imshow(domino_part_2)
                                end

                                domino_dots_1 = dot_count(domino_part_1);
                                domino_dots_2 = dot_count(domino_part_2);

                                if domino_dots_1 < 7 && domino_dots_2 < 7
                                    PntDom = PntDom + domino_dots_1 + domino_dots_2;
                                    tDom = tDom + 1;
                                    % find equal sides (doubles)
                                    if domino_dots_1 == domino_dots_2
                                        tDuplas = tDuplas + 1;
                                    end
                                end

                                % count dominos on horizontal position
                                if img_original_is_horizonal == 1
                                    RDO = RDO + 1;
                                end

                                if debug_mode == 1
                                    disp("DOMINO PART 1: " + domino_dots_1)
                                    disp("DOMINO PART 2: " + domino_dots_2)
                                    if img_original_is_horizonal == 1
                                        disp("ORIGINAL IS HORIZONTAL")
                                    end
                                end
                            end
                            continue
                        else
                            continue
                        end
                    elseif nnz(bin_sub_img) == 220 && h/w < 1.6
                        continue
                    end

                    if h == w % dice
                        
                        % filter to test tilted imgs
                        im_test = autobin(sub_img_to_process);
                        im_test = im_test(1:2, ceil(end/2-10):ceil(end/2+10));
                        
                        if debug_mode == 1
                            figure(200); imshow(im_test)
                        end
                                                    
                        if nnz(im_test) > 0 % rotate the img
                            copy_sub_img_to_process = imrotate(copy_sub_img_to_process, -45, 'crop');
                            if debug_mode == 1
                                figure(201); imshow(copy_sub_img_to_process)
                            end
                            copy_sub_img_to_process = imresize(copy_sub_img_to_process, [50 50]);
                            copy_sub_img_to_process = copy_sub_img_to_process(10:end-10, 10:end-10);
                            bin_sub_img = autobin(copy_sub_img_to_process);
                            img_is_tilted = 1;
                            avg = mean2(copy_sub_img_to_process);
                            if debug_mode == 1
                                figure(202); imshow(bin_sub_img)
                                disp("NNZ: " + nnz(bin_sub_img))
                                disp("mean2: " + avg)
                            end
                            if avg > 0.026
                                if nnz(bin_sub_img) > 300 || nnz(bin_sub_img) == 81 || nnz(bin_sub_img) == 157 || nnz(bin_sub_img) == 75
                                    copy_sub_img_to_process = sub_img_to_process;
                                    bin_sub_img = autobin(copy_sub_img_to_process);
                                    n_px_rem = ceil(h/w*25);
                                    bin_sub_img = bwareaopen(bin_sub_img, n_px_rem);
                                    img_is_tilted = 0;
                                end
                            else
                                copy_sub_img_to_process = imadjust(copy_sub_img_to_process, [0.0 0.02], []);
                                bin_sub_img = autobin(copy_sub_img_to_process);
%                                 figure(255); imshow(copy_sub_img_to_process)
%                                 figure(256); imshow(bin_sub_img)
                            end
                        end

                        % count num dots
                        dice_dots = dot_count(bin_sub_img); % num dot on a dice
    
                        if dice_dots < 7 && dice_dots > 0
                            PntDad = PntDad + dice_dots; % tot num dots
                            tDice = tDice + 1;
                            % count dices on horizontal position
                            if img_is_tilted == 0
                                RFO = RFO + 1;
                            end
                            if debug_mode == 1
                                disp("DICE DOTS: " + dice_dots)
                                if img_is_tilted == 1
                                    disp("TILTED")
                                end
                            end                          
                        end                     
                        % dice process ends here

                    elseif h/w > 1.6 % domino
                        
                        domino_part_1 = bin_sub_img(4:ceil(h/2)-4, 1:w);
                        domino_part_2 = bin_sub_img(ceil(h/2)+4:h-4, 1:w);
                        if debug_mode == 1
                            figure(7); imshow(domino_part_1)
                            figure(8); imshow(domino_part_2)
                        end

                        domino_dots_1 = dot_count(domino_part_1);
                        domino_dots_2 = dot_count(domino_part_2);

                        if domino_dots_1 < 7 && domino_dots_2 < 7
                            PntDom = PntDom + domino_dots_1 + domino_dots_2;
                            tDom = tDom + 1;
                            % find equal sides (doubles)
                            if domino_dots_1 == domino_dots_2
                                tDuplas = tDuplas + 1;
                            end
                        end

                        % count dominos on horizontal position
                        if img_original_is_horizonal == 1
                            RDO = RDO + 1;
                        end

                        if debug_mode == 1
                            disp("DOMINO PART 1: " + domino_dots_1)
                            disp("DOMINO PART 2: " + domino_dots_2)
                            if img_original_is_horizonal == 1
                                disp("ORIGINAL IS HORIZONTAL")
                            end
                        end
                        % dominos process ends here

                    else % card
                        bin_sub_img = imresize(bin_sub_img, [110 80]);
                        bin_sub_img = bwareaopen(bin_sub_img, 50);
                        [h, w, d] = size(bin_sub_img); % height, width, dimension

                        first_time = 0; % flag first iteration
                        check_diamonds = 0;
                        
                        [Llabel1, Nlabel1] = bwlabel(bin_sub_img);
                        card_test = sum(sub_img_to_process(:) > 0 & sub_img_to_process(:) < 0.12);
%                         card_test = sum(sub_img_to_process(:) > 0 & sub_img_to_process(:) < 0.30);

                        S = regionprops(Llabel1, 'all');

                        % Actual number of pixels in the region, returned as a scalar
                        suit_area = max(cat(1, S.Area));
                        suit_count = 0; % num of suit in a card

                        for j=1:Nlabel1
                            % count suits
                            if S(j).Area > (h*w)/70
                                suit_count = suit_count + 1; % count each suit found. NOTE: value is dif from Nlabel1
                                if first_time == 0
                                    if card_test > 50
                                        EspPaus = EspPaus + 1;
                                        if debug_mode == 1
                                            disp("ESPPAUS")
                                        end
                                    else
                                        CopOuros = CopOuros + 1;
                                        check_diamonds = 1;
                                        if debug_mode == 1
                                            disp("COPOUROS")
                                        end
                                    end
                                    if S(j).Circularity < 0.83 && check_diamonds == 1
                                        Ouros = Ouros + 1;
                                        if debug_mode == 1
                                            disp("OUROS")
                                            disp("CIRCULARITY: " + S(j).Circularity)
                                        end
                                    end
                                end
                                first_time = 1;
                            end
                        end

                        if suit_count ~= 0 && suit_count < 10
                            if debug_mode == 1
                                disp("NUMBER OF SUITS: " + suit_count)
                            end
                            tCard = tCard + 1;
                            suit_value = [suit_value, suit_count]; % not sure how to fix this
                        end
                        % card process ends here
                    end

                catch e %e is an MException struct
                    fprintf(1,'\n%s',e.identifier);
                    fprintf(1,'\n%s',e.message);
                end
            end
    
            % ****** FOR LOOP NNT ENDS HERE ****** %
       
            % sort suits
            sorted_array = sort(suit_value);
            for i=1:size(sorted_array, 2)
                StringPT = strcat(StringPT, int2str(sorted_array(i)));
            end
            if debug_mode == 1
                disp("FILE COUNT: " + file)
            end
    
            % write output file tp1_104580.txt
            file = fopen(['tp1_' num2str(NumMec) '.txt'], 'a');
            text_line = strcat(num2str(NumMec),',',num2str(NumSeq),',',num2str(NumImg),',',num2str(tDom),',',num2str(tDice),','...
                ,num2str(tCard),',',num2str(RDO),',',num2str(RFO),',',num2str(tDuplas),',',num2str(PntDom),',',num2str(PntDad),','...
                ,num2str(CopOuros),',',num2str(EspPaus),',',num2str(Ouros),',',StringPT);
            fprintf(file, text_line);
            fprintf(file, '\n');
            fclose(file);
        end
    catch e
       fprintf(1,'1 :: The identifier was:\n%s',e.identifier);
       fprintf(1,'There was an error! The message was:\n%s',e.message);
    end
    % **************************** MAIN FOR LOOP ENDS HERE **************************** %

end
% -------------------------------- FUNCTIONS USED IN THE CODE -------------------------------- %

% transform img into a binary img with black background
function [B] = autobin(A)
    A = im2double(A);
    t = graythresh(A);
    B = imbinarize(A,t); 
    tot_white = nnz(B);
    
    if tot_white > numel(B)/2
        B = ~B;
    end
end

% count dots on a img
function num_dots = dot_count(img)
    img = medfilt2(img, [2 2]);
    img_nborders = img;
    img_nborders = imresize(img_nborders, [50 50]);
    img_nborders = bwareaopen(img_nborders, 5);
%     img_nborders(:, 1:3) = 0;
%     img_nborders(:, end-2:end) = 0;
%     img_nborders(1:3,:) = 0;
%     img_nborders(end-2:end, :) = 0;

    [hnd, wnd, dnd] = size(img_nborders);

%     img_nborders = bwmorph(img_nborders,'close', 1);
    se = strel('disk',1);
    img_nborders = imclose(img_nborders,se);
    [Llabel1, Nlabel1] = bwlabel(img_nborders);
    S = regionprops(Llabel1, 'all');
 
%       figure(500); imshow(img_nborders)
%       nnz(img_nborders)

    dot_area = max(cat(1, S.Area));
    num_dots = 0;

    for j=1:Nlabel1

        if S(j).Area > (hnd*wnd)/45 && nnz(img_nborders) < 830 && nnz(img_nborders) ~= 412
            num_dots = num_dots + 1;
        end
        
    end
end
