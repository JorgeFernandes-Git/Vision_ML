% Jorge Fernandes
% 104580
% May 2022
function NumMec = tp2_104580()
    try
        % cookies props
        beurre_1 = [0.7445    0.9494    0.4359    0.5195 0.1045
            0.7661    0.9498    0.4384    0.5674 0.1047
            0.6842    0.9416    0.4390    0.6784 0.1085
            0.7564    0.9505    0.4388    0.6414 0.1096
            0.7381    0.9561    0.4372    0.8693 0.1014
            0.7542    0.9481    0.4348    0.5257 0.1068
            0.7648    0.9592    0.4381    0.8071    0.1069
            0.7231    0.9535    0.4375    0.5101    0.0999
            0.6447    0.9381    0.4377    0.5099    0.0973
            0.6810    0.9331    0.4360    0.7425    0.0979
            0.7387    0.9622    0.4365    0.9077    0.1056
            0.7577    0.9700    0.4455    0.9654    0.1028
            0.7780    0.9546    0.4342    0.5442    0.0962
            0.7870    0.9839    0.4404    0.9786    0.1067
            0.7323    0.9492    0.4314    0.8837    0.1179];

        beurre_2 = [0.7373    0.9592    0.5312    0.5752 0.1180
            0.7523    0.9632    0.5311    0.5996 0.1181
            0.7884    0.9683    0.5298    0.5422 0.1210
            0.7395    0.9648    0.5320    0.7816 0.1241
            0.7628    0.9644    0.5340    0.8047 0.1196
            0.7506    0.9592    0.5332    0.6167 0.1187
            0.7448    0.9669    0.5461    0.9506 0.1296
            0.7994    0.9714    0.5327    0.8986 0.1247
            0.7961    0.9713    0.5353    0.9031 0.1226
            0.7984    0.9830    0.5475    0.9689 0.1247
            0.7395    0.9648    0.5320    0.7816    0.1182
            0.7448    0.9669    0.5461    0.9506    0.1155
            0.7119    0.9449    0.5322    0.7505    0.1207];

        choco_1 = [1.0077    0.9915    0.3159    0.8042 0.1266
            1.0168    0.9923    0.3333    0.8166 0.1260
            1.0162    0.9927    0.3305    0.8128 0.1247
            1.0151    0.9895    0.3311    0.8041 0.1258
            0.9996    0.9918    0.3264    0.7916 0.1226
            1.0169    0.9919    0.3246    0.8090 0.1247
            1.0152    0.9894    0.3261    0.8134 0.1202
            1.0067    0.9919    0.3262    0.8038 0.1296
            1.0020    0.9906    0.3165    0.7937 0.1285
            1.0207    0.9906    0.3331    0.8036 0.1247
            1.0001    0.9925    0.3324    0.8010    0.1262
            1.0121    0.9915    0.3243    0.7941    0.1269
            1.0115    0.9919    0.3105    0.8026    0.1266
            1.0207    0.9912    0.3044    0.8093    0.1267
            1.0161    0.9924    0.3440    0.8128    0.1263
            0.9846    0.9901    0.3207    0.7819    0.1266
            1.0137    0.9891    0.3261    0.8123    0.1255
            1.0067    0.9922    0.3093    0.8093    0.1266
            0.9829    0.9883    0.3275    0.7972    0.1268
            0.9748    0.9875    0.3218    0.7828    0.1274
            0.8799    0.9738    0.3597    0.8224    0.1290];

        choco_2 = [1.0074    0.9902    0.2494    0.7816 0.1457
            1.0022    0.9900    0.2492    0.7880 0.1460
            1.0081    0.9885    0.2401    0.7943 0.1453
            1.0144    0.9899    0.2298    0.8141 0.1452
            0.9957    0.9904    0.2476    0.7654 0.1485
            1.0102    0.9901    0.2673    0.8232 0.1465
            1.0124    0.9902    0.2684    0.8436 0.1487
            1.0017    0.9898    0.2388    0.8091 0.1496
            1.0120    0.9902    0.2485    0.8147 0.1402
            1.0136    0.9899    0.2497    0.7949 0.1486
            1.0059    0.9895    0.2601    0.7810 0.1474
            0.9948    0.9890    0.2467    0.7818 0.1496
            0.9941    0.9888    0.2447    0.8158    0.1457
            0.9962    0.9845    0.2449    0.7653    0.1475
            0.9806    0.9871    0.2539    0.7746    0.1463
            0.9833    0.9823    0.2440    0.7573    0.1480];

        confit_1 = [0.7811    0.9373    0.3585    0.5348 0.1748
            0.7747    0.9364    0.3579    0.5379 0.1746
            0.7702    0.9403    0.3583    0.7969 0.1758
            0.7938    0.9303    0.3569    0.5779 0.1785
            0.7272    0.9140    0.3629    0.5390 0.1712
            0.7413    0.9187    0.3439    0.5922 0.1753
            0.8027    0.9370    0.3586    0.5765 0.1769
            0.7883    0.9561    0.3562    0.9528 0.1785
            0.7932    0.9324    0.3582    0.6058 0.1762
            0.7938    0.9303    0.3569    0.5779    0.1742
            0.7883    0.9561    0.3562    0.9528    0.1750
            0.7027    0.9102    0.3401    0.5306    0.1789
            0.7981    0.9381    0.3507    0.8270    0.1745];

        confit_2 = [ 0.9028    0.9701    0.1888    0.7806 0.2029
            0.9270    0.9719    0.2009    0.7960 0.2041
            0.9430    0.9725    0.1964    0.7884 0.2063
            0.8964    0.9677    0.1921    0.7717 0.2041
            0.8596    0.9520    0.1921    0.7702 0.2068
            0.8334    0.9644    0.1961    0.7832 0.2087
            0.7903    0.9623    0.1771    0.7673 0.2081
            0.9006    0.9711    0.2030    0.7872 0.2017
            0.9153    0.9707    0.1983    0.7859 0.2019
            0.9197    0.9693    0.1911    0.7779 0.2057
            0.8757    0.9681    0.1939    0.7755 0.2056
            0.8596    0.9520    0.1921    0.7702    0.2026
            0.8851    0.9689    0.2061    0.7729    0.2029
            0.8704    0.9618    0.1481    0.7681    0.2058];

        craker_1 = [0.9533    0.9839    0.1296    0.7967 0.0984
            0.9303    0.9822    0.1299    0.7977 0.0960
            0.9205    0.9793    0.1034    0.8025 0.0919
            0.8376    0.9776    0.1180    0.7779 0.0841
            0.8781    0.9795    0.1210    0.7840 0.0878
            0.9113    0.9816    0.1267    0.7924 0.0845
            0.9111    0.9767    0.1655    0.7779 0.0847
            0.9711    0.9837    0.1277    0.7971 0.0876
            0.8987    0.9795    0.0958    0.7904 0.0845
            0.9453    0.9829    0.1165    0.7872 0.0863
            0.9149    0.9814    0.1241    0.7905 0.0954
            0.9685    0.9829    0.1623    0.8002 0.0985
            0.9111    0.9767    0.1655    0.7779    0.0982
            0.9453    0.9829    0.1165    0.7872    0.0999
            0.9685    0.9829    0.1623    0.8002    0.0933
            0.8484    0.9723    0.1030    0.7462    0.0969
            0.9037    0.9755    0.1239    0.7841    0.0769
            0.8627    0.9696    0.1112    0.7681    0.0769];

        craker_2 = [0.8361    0.9908    0.3978    0.5508 0.1118
            0.8613    0.9910    0.3946    0.9693 0.1154
            0.8391    0.9894    0.3980    0.5507 0.1114
            0.8503    0.9833    0.3985    0.5768 0.1156
            0.8429    0.9811    0.3983    0.6739 0.1174
            0.8331    0.9694    0.4024    0.6422 0.1165
            0.8429    0.9811    0.3983    0.6739    0.1118
            0.8572    0.9847    0.3991    0.5952    0.1121
            0.8410    0.9895    0.3971    0.8923    0.1126];

        fan_1 = [0.8405    0.9853    0.6687    0.6212 0.1489
            0.8522    0.9852    0.6717    0.6241 0.1453
            0.8443    0.9843    0.6703    0.6213 0.1485
            0.8500    0.9826    0.6710    0.6161 0.1496
            0.6549    0.9087    0.6691    0.5898 0.1354
            0.8228    0.9880    0.6683    0.6030 0.1498
            0.8295    0.9898    0.6715    0.6061 0.1523
            0.8467    0.9924    0.6719    0.6119 0.1474
            0.8392    0.9846    0.6672    0.6506 0.1496
            0.8298    0.9881    0.6672    0.6140 0.1489
            0.7790    0.9479    0.6690    0.6552 0.1478
            0.6549    0.9087    0.6691    0.5898    0.1526
            0.8389    0.9643    0.6766    0.6283    0.1500
            0.8129    0.9482    0.6767    0.6607    0.1513
            0.8530    0.9855    0.6602    0.8180    0.1479
            0.8547    0.9822    0.6573    0.7968    0.1481
            0.8416    0.9841    0.6679    0.7786    0.1488
            0.8453    0.9856    0.6733    0.7956    0.1481
            0.7020    0.8844    0.6360    0.5289    0.1536];

        fan_2 = [0.8041    0.9843    0.6709    0.7329 0.0611
            0.8192    0.9848    0.6773    0.5914 0.0603
            0.8085    0.9828    0.6746    0.6450 0.0611
            0.8084    0.9851    0.6754    0.5997 0.0609
            0.8246    0.9796    0.6765    0.6259 0.0654
            0.8066    0.9834    0.6715    0.6843 0.0647
            0.8145    0.9798    0.6732    0.6538 0.0658
            0.8212    0.9810    0.6822    0.6021 0.0663
            0.7589    0.9596    0.6659    0.5890 0.0687
            0.8012    0.9853    0.6749    0.6493 0.0698
            0.8172    0.9804    0.6793    0.5973 0.0612
            0.8428    0.9778    0.6652    0.7497 0.0647
            0.7589    0.9596    0.6659    0.5890    0.0886
            0.7735    0.9589    0.6727    0.6610    0.0625
            0.7401    0.9355    0.6725    0.5874    0.0646
            0.7641    0.9672    0.6740    0.7310    0.0624];

        ginger_1 = [1.0071    0.9906    0.2958    0.8106 0.1730
            1.0060    0.9902    0.2939    0.8093 0.1731
            0.9875    0.9915    0.2867    0.7993 0.1785
            1.0067    0.9907    0.2891    0.8038 0.1754
            1.0177    0.9906    0.2755    0.8131 0.1798
            0.9857    0.9912    0.2841    0.7971 0.1763
            1.0062    0.9904    0.2781    0.8104 0.1754
            0.9888    0.9904    0.2819    0.8007 0.1785
            0.9994    0.9899    0.2766    0.7934 0.1741
            0.9953    0.9914    0.2854    0.7896 0.1756
            1.0225    0.9916    0.2793    0.7988 0.1785
            0.9952    0.9899    0.2869    0.7952 0.1769
            0.9875    0.9915    0.2867    0.7993    0.1731
            1.0177    0.9906    0.2755    0.8131    0.1734
            1.0057    0.9907    0.3028    0.7930    0.1732];

        ginger_2 = [1.0020    0.9890    0.2780    0.8224 0.1595
            0.9736    0.9859    0.2801    0.7924 0.1605
            0.9942    0.9855    0.2782    0.7880 0.1608
            0.9887    0.9874    0.2804    0.7821 0.1654
            0.9798    0.9816    0.2883    0.7910 0.1689
            0.9982    0.9870    0.2731    0.8203 0.1587
            0.9811    0.9852    0.2819    0.7859 0.1685
            1.0066    0.9868    0.2878    0.7923 0.1664
            0.9992    0.9869    0.2706    0.7997 0.1678
            0.9919    0.9852    0.2874    0.7848 0.1641
            0.9798    0.9816    0.2883    0.7910    0.1597
            0.9925    0.9889    0.2907    0.7799    0.1721
            0.9475    0.9827    0.2842    0.8104    0.1742
            0.9054    0.9710    0.2953    0.7883    0.1630
            0.9375    0.9816    0.2878    0.7579    0.1611
            0.9911    0.9861    0.2992    0.8172    0.1727];

        lotus_1 = [0.7414    0.9670    0.8506    0.8399 0.1243
            0.6864    0.9587    0.8509    0.7044 0.1186
            0.6829    0.9606    0.8512    0.5355 0.1160
            0.8050    0.9970    0.8513    0.9869 0.1227
            0.6728    0.9581    0.8510    0.6467 0.1254
            0.6961    0.9582    0.8511    0.6065 0.1183
            0.6894    0.9576    0.8510    0.6543 0.1148
            0.6845    0.9586    0.8507    0.6006 0.1254
            0.6783    0.9594    0.8511    0.8463 0.1285
            0.7561    0.9615    0.8498    0.7878 0.1241
            0.7569    0.9593    0.8495    0.6336 0.1212
            0.7058    0.9599    0.8505    0.7678 0.1225
            0.6783    0.9594    0.8511    0.8463    0.1169
            0.6697    0.9363    0.8476    0.7833    0.1200
            0.7220    0.9337    0.8420    0.8520    0.1180
            0.7953    0.9931    0.8631    0.9768    0.0910
            0.7455    0.9615    0.8605    0.5647    0.0912
            0.7111    0.9380    0.8571    0.5338    0.1055
            0.6668    0.9163    0.8605    0.6006    0.0929];

        lotus_2 = [0.7221    0.9683    0.8612    0.5265 0.0890
            0.7177    0.9646    0.8611    0.6306 0.0911
            0.7267    0.9639    0.8612    0.7303 0.0896
            0.7305    0.9667    0.8613    0.5960 0.0845
            0.7428    0.9655    0.8615    0.5301 0.0912
            0.7635    0.9660    0.8607    0.5836 0.0901
            0.7473    0.9602    0.8616    0.8437 0.0847
            0.7717    0.9652    0.8611    0.5908 0.0863
            0.7655    0.9721    0.8606    0.5336 0.0847
            0.7307    0.9622    0.8616    0.6204 0.0867
            0.7696    0.9651    0.8611    0.6205 0.0905
            0.7473    0.9602    0.8616    0.8437    0.0951
            0.7655    0.9721    0.8606    0.5336    0.0947
            0.7614    0.9673    0.8596    0.8626    0.0904];

        maria_1 = [1.0205    0.9916    0.2673    0.8120 0.0753
            1.0202    0.9914    0.2827    0.8087 0.0773
            1.0186    0.9920    0.2641    0.8041 0.0753
            1.0148    0.9932    0.2672    0.8051 0.0741
            1.0082    0.9942    0.2683    0.7995 0.0798
            1.0067    0.9941    0.2709    0.7988 0.0763
            1.0162    0.9917    0.2673    0.7997 0.0712
            1.0049    0.9940    0.2638    0.8026 0.0754
            0.9798    0.9885    0.2685    0.8020 0.0776
            1.0220    0.9927    0.2615    0.8059 0.0725
            0.9085    0.9796    0.2759    0.7831 0.0789
            1.0243    0.9931    0.2831    0.8216    0.0752
            1.0225    0.9920    0.2602    0.8202    0.0754];

        maria_2 = [1.0067    0.9921    0.1660    0.7946 0.0923
            1.0166    0.9930    0.1614    0.8166 0.0912
            1.0001    0.9928    0.1568    0.7946 0.0914
            1.0104    0.9924    0.1701    0.7976 0.0978
            0.9875    0.9905    0.1384    0.7816 0.0954
            0.9793    0.9846    0.1708    0.7812 0.0896
            0.9552    0.9810    0.1422    0.7811 0.1004
            0.9534    0.9843    0.1724    0.7962 0.0954
            0.9641    0.9829    0.1665    0.7926 0.0924
            1.0227    0.9903    0.1750    0.8134 0.0925
            1.0237    0.9909    0.1851    0.8084 0.0941
            1.0012    0.9920    0.1646    0.8013 0.0947
            1.0175    0.9923    0.1632    0.8042 0.0987
            0.9294    0.9707    0.2585    0.7704    0.0804
            1.0111    0.9915    0.1216    0.8029    0.0914];

        oreo_1 = [0.9493    0.9848    0.1637    0.7930 0.1101
            0.9885    0.9876    0.1503    0.7993 0.1096
            0.9614    0.9865    0.1669    0.7875 0.1045
            0.9751    0.9889    0.1906    0.8094 0.1012
            0.9440    0.9877    0.1783    0.7957 0.1065
            0.9624    0.9855    0.1717    0.7976 0.1086
            0.9163    0.9850    0.1536    0.7973 0.1048
            0.7579    0.9440    0.1889    0.7606 0.1106
            0.6443    0.9266    0.2291    0.7428 0.1107
            0.9679    0.9846    0.1400    0.7924 0.1014
            0.9968    0.9859    0.1567    0.8024 0.1012
            0.9261    0.9839    0.1623    0.7930 0.1045
            1.0122    0.9916    0.1698    0.8018 0.1047
            1.0153    0.9898    0.1595    0.8056 0.1096
            0.9675    0.9878    0.1661    0.8141 0.1065
            0.9576    0.9867    0.1536    0.7998 0.1041
            0.9449    0.9876    0.1678    0.7883 0.1074
            0.9508    0.9875    0.1677    0.7943 0.1082
            0.9751    0.9889    0.1906    0.8094    0.1095
            0.6443    0.9266    0.2291    0.7428    0.1081
            0.9261    0.9839    0.1623    0.7930    0.1220
            0.9237    0.9759    0.1810    0.7996    0.1291
            0.9366    0.9749    0.1173    0.8108    0.1279
            0.9680    0.9819    0.0853    0.8008    0.1096];

        oreo_2 = [1.0061    0.9925    0.0931    0.7964 0.0725
            1.0222    0.9912    0.0773    0.8131 0.0722
            1.0065    0.9923    0.1194    0.8036 0.0765
            1.0145    0.9925    0.1244    0.8008 0.0745
            1.0220    0.9925    0.1369    0.8113 0.0785
            1.0155    0.9913    0.1269    0.8078 0.0754
            1.0248    0.9916    0.1438    0.8165 0.0741
            0.9968    0.9915    0.1321    0.7986 0.0721
            1.0148    0.9916    0.1294    0.8137 0.0712
            1.0194    0.9913    0.1404    0.8173 0.0698
            1.0066    0.9915    0.1247    0.7964 0.0814
            1.0090    0.9925    0.1111    0.7923    0.0726
            0.9562    0.9776    0.2041    0.7702    0.0852
            0.9215    0.9711    0.0827    0.7697    0.0729];

        palmier_1 = [0.8028    0.9265    0.7011    0.6750 0.1007
            0.8234    0.9261    0.6985    0.6925 0.1047
            0.8196    0.9288    0.6883    0.7811 0.1089
            0.8320    0.9279    0.7001    0.6896 0.10452
            0.7279    0.9061    0.6981    0.6636 0.1063
            0.7973    0.9241    0.7008    0.7125 0.1078
            0.8061    0.9226    0.7002    0.7026 0.1006
            0.8328    0.9291    0.7000    0.6936 0.1012
            0.8116    0.9265    0.6997    0.6934 0.1098
            0.8255    0.9242    0.7008    0.6838 0.1061
            0.8284    0.9270    0.7016    0.7569    0.1062
            0.8205    0.9318    0.7032    0.7974    0.1029
            0.8512    0.9247    0.6981    0.6960    0.1029
            0.7768    0.9105    0.7025    0.6679    0.1112
            0.8032    0.9280    0.6857    0.7835    0.1179
            0.8266    0.9230    0.7053    0.6781    0.1146
            0.8307    0.9322    0.7057    0.8011    0.1048];

        palmier_2 = [0.8574    0.9560    0.6008    0.7838 0.1222
            0.8362    0.9541    0.5984    0.7061 0.1223
            0.8453    0.9539    0.5973    0.7066 0.1221
            0.8634    0.9539    0.5966    0.7618 0.1247
            0.8609    0.9544    0.5956    0.7637 0.1285
            0.8281    0.9538    0.5973    0.7138 0.1198
            0.8607    0.9544    0.6003    0.7186 0.1314
            0.8540    0.9553    0.5885    0.7702 0.1284
            0.8538    0.9552    0.5991    0.7721 0.1268
            0.8605    0.9546    0.5975    0.7812 0.1243
            0.8590    0.9553    0.5984    0.7265    0.1222
            0.7851    0.9497    0.5981    0.7726    0.1263
            0.7729    0.9338    0.6033    0.7169    0.1292
            0.8508    0.9506    0.5884    0.7771    0.1231];

        parijse_1 = [0.6796    0.9299    0.6664    0.6682 0.1683
            0.6629    0.9273    0.6680    0.6637 0.1667
            0.7186    0.9434    0.6706    0.8175 0.1714
            0.7344    0.9362    0.6685    0.6788 0.1708
            0.6390    0.9283    0.6679    0.7767 0.1608
            0.6965    0.9326    0.6691    0.7868 0.1654
            0.6494    0.9268    0.6670    0.6576 0.1712
            0.6866    0.9341    0.6698    0.7980 0.1657
            0.6678    0.9301    0.6694    0.8171 0.1659
            0.6626    0.9289    0.6665    0.6743 0.1689
            0.6493    0.9270    0.6664    0.6546 0.1698
            0.6583    0.9273    0.6666    0.6485 0.1657
            0.6774    0.9286    0.6672    0.6802 0.1713
            0.6748    0.9238    0.6648    0.6582    0.1700
            0.6878    0.9301    0.6640    0.6622    0.1695
            0.6188    0.9223    0.6694    0.6830    0.1689
            0.7990    0.9468    0.6646    0.6859    0.1749
            0.6135    0.9160    0.6679    0.7476    0.1703
            0.6404    0.9303    0.6660    0.7912    0.1668
            0.6383    0.9298    0.6639    0.7925    0.1678
            0.6434    0.9329    0.6596    0.6900    0.1737];

        parijse_2 = [0.8222    0.9455    0.7420    0.7092 0.1421
            0.7508    0.9377    0.7475    0.7185 0.1394
            0.7941    0.9410    0.7473    0.7259 0.1498
            0.8106    0.9433    0.7444    0.7399 0.1490
            0.8119    0.9477    0.7486    0.7614 0.1445
            0.7931    0.9439    0.7477    0.7530 0.1447
            0.7716    0.9403    0.7449    0.7085 0.1452
            0.7589    0.9399    0.7460    0.6952 0.1447
            0.8240    0.9459    0.7431    0.7189 0.1449
            0.7162    0.9424    0.7456    0.7292 0.1454
            0.7342    0.9379    0.7431    0.7010 0.1412
            0.8590    0.9553    0.5984    0.7265 0.1403
            0.8168    0.9427    0.7478    0.7476    0.1397
            0.7185    0.9292    0.7416    0.7193    0.1413];

        sugar_1 = [0.9877    0.9820    0.1239    0.8054 0.1151
            0.9848    0.9814    0.1391    0.7918 0.1160
            0.9769    0.9814    0.1275    0.8001 0.1156
            0.8710    0.9743    0.1381    0.7974 0.1147
            0.9660    0.9797    0.1208    0.7888 0.1196
            0.9703    0.9808    0.1263    0.7911 0.1163
            0.9672    0.9805    0.1058    0.7914 0.1174
            0.9732    0.9788    0.1240    0.8011 0.1185
            0.9291    0.9710    0.1236    0.7771 0.1165
            0.9644    0.9795    0.1217    0.7913 0.1147
            0.9596    0.9788    0.1287    0.7908 0.1152
            0.9729    0.9813    0.1097    0.7932 0.1167
            0.9947    0.9828    0.1546    0.7972 0.1141
            0.9291    0.9710    0.1236    0.7771    0.1146
            0.9185    0.9712    0.1546    0.8033    0.1150
            0.9446    0.9764    0.0997    0.7580    0.1177];

        sugar_2 = [0.9686    0.9804    0.1375    0.7800 0.1562
            0.9717    0.9794    0.1401    0.7879 0.1547
            0.9730    0.9808    0.1393    0.7941 0.1578
            0.9850    0.9815    0.1288    0.8018 0.1547
            0.9704    0.9806    0.1352    0.7820 0.1596
            0.9729    0.9810    0.1420    0.7863 0.1563
            0.8972    0.9177    0.0941    0.7382 0.1547
            0.8687    0.9505    0.1483    0.7594 0.1549
            0.8941    0.9617    0.1593    0.7777 0.1598
            0.9711    0.9824    0.1403    0.7830 0.1501
            0.9897    0.9824    0.1222    0.7972 0.1497
            0.9783    0.9816    0.1474    0.7930 0.1605
            0.8972    0.9177    0.0941    0.7382    0.1465
            0.9521    0.9775    0.1100    0.7733    0.1563
            0.9283    0.9752    0.1250    0.7876    0.1572];

        wafer_1 = [0.7434    0.9796    0.8501    0.4787 0.1370
            0.7577    0.9792    0.8501    0.5209 0.1361
            0.7390    0.9774    0.8500    0.6633 0.1345
            0.7547    0.9838    0.8504    0.4735 0.1398
            0.7440    0.9790    0.8502    0.4873 0.1348
            0.7226    0.9574    0.8501    0.7443 0.1399
            0.7376    0.9851    0.8502    0.4938 0.1347
            0.7381    0.9752    0.8500    0.6343 0.1301];

        wafer_2 = [0.7546    0.9741    0.8356    0.5902 0.1436
            0.7551    0.9831    0.8355    0.5240 0.1430
            0.7444    0.9822    0.8355    0.4934 0.1436
            0.7650    1.0000    0.8488    1.0000 0.1345
            0.7179    0.9521    0.8346    0.9078 0.1485
            0.6983    0.9378    0.8485    0.6629 0.1463
            0.7573    0.9827    0.8352    0.4835 0.1489
            0.7594    0.9872    0.8491    0.9541 0.1452
            0.7566    0.9742    0.8355    0.6976 0.1475
            0.7610    0.9789    0.8356    0.5487 0.1426
            0.6400    0.9356    0.8401    0.4791 0.1402
            0.6026    0.9439    0.8392    0.7424 0.1498
            0.7015    0.9758    0.8351    0.9709 0.1457
            0.7179    0.9521    0.8346    0.9078    0.1445
            0.6869    0.9106    0.8470    0.5110    0.1388
            0.7650    1.0000    0.8488    1.0000    0.1345];

        zebra_1 = [0.8413    0.9732    0.1470    0.7798 0.1987
            0.8992    0.9783    0.1354    0.7967 0.2013
            0.9324    0.9785    0.1578    0.7883 0.1985
            0.8926    0.9766    0.1411    0.7932 0.2068
            0.8625    0.9737    0.1409    0.7817 0.2174
            0.8744    0.9766    0.1504    0.7999 0.1954
            0.8781    0.9742    0.1492    0.7942 0.1998
            0.9525    0.9816    0.1632    0.8006 0.2045
            0.8668    0.9732    0.1353    0.7713 0.2083
            0.8311    0.9719    0.1470    0.7883 0.1985
            0.7369    0.9587    0.1981    0.7686    0.1978
            0.8970    0.9689    0.1992    0.7689    0.1977
            0.9097    0.9768    0.1206    0.7840    0.2009
            0.8670    0.9754    0.1570    0.7767    0.1985];

        zebra_2 = [0.9720    0.9835    0.4789    0.8057 0.2989
            0.9709    0.9804    0.4866    0.8026 0.2988
            0.9889    0.9820    0.4742    0.7946 0.2954
            0.9332    0.9758    0.4851    0.7816 0.2898
            0.9836    0.9829    0.4831    0.7936 0.3041
            0.9754    0.9803    0.4841    0.8031 0.2945
            0.9790    0.9828    0.4889    0.8118 0.2987
            0.9332    0.9758    0.4851    0.7816    0.2986
            0.9270    0.9711    0.4910    0.7677    0.2968
            0.7944    0.8104    0.5119    0.6582    0.2882];


        NumMec = 104580; % my number
        Level = 1;
        delete(['tp2_' num2str(NumMec) '.txt']); % delete last file
    
        path='../'; % path to test img svpi2022_TP2_img_*' int2str(Level) '_*.png
        files_list = dir([path 'svpi2022_TP2_img_*' int2str(Level) '_*.png']);
        num_files = size(files_list, 1); % tot num of files encontered

        debug_mode = 0; % show imgs flag, for debugging
    
        for file=1:num_files % go through  all files
    
            file_path = files_list(file).name; % get path

            % variables
            NumSeq=str2double(file_path(strlength(file_path)-9:strlength(file_path)-7));
            NumImg=str2double(file_path(strlength(file_path)-5:strlength(file_path)-4));
            ObjBord = 0;
            ObjPart = 0;
            ObjOk = 0;
            beurre = 0;
            choco = 0;
            confit = 0;
            cracker = 0;
            fan = 0;
            ginger = 0;
            lotus = 0;
            maria = 0;
            oreo = 0;
            palmier = 0;
            parijse = 0;
            sugar = 0;
            wafer = 0;
            zebra = 0;

            tot_cookies = 0; % total number of cookies
            strange_BG = 0; % BG 6 and BG 19 flag
                
            test_img = im2double(imread([path file_path])); % convert to double (gray img 0.0 to 1.0)         
            test_img_gray = im2gray(test_img);
            [h_t, w_t, d_t] = size(test_img); % height, width, dimension

            test_img_hsv = rgb2hsv(test_img);
            H=test_img_hsv(:,:,1);
            modH=mode(H, 'all');
            S=test_img_hsv(:,:,2);
            modS=mode(S, 'all');
            V=test_img_hsv(:,:,3);
            modV=mode(V, 'all');

            if ((modV > 0.3) && (modV < 0.4) && (modH > 0.5) && (modH < 0.6)) % BG 12
                M_H =(H>=0.501 & H<=0.899);
                M_S =(S>=0.4 & S<=1);
                M_V =(V>=0 & V<=0.99);
                test_img_hsv = M_H & M_S & M_V;
                test_img_hsv = ~test_img_hsv;
                test_img_hsv = bwareaopen(test_img_hsv, 30);
                test_img_hsv = im2double(test_img_hsv);
            elseif ((modV > 0.86) && (modH > 0.5) && (modH < 0.6)) % BG 13 e 26
                M_H =(H>=0.52 & H<=0.661);
                test_img_hsv = M_H;
                test_img_hsv = ~test_img_hsv;
                test_img_hsv = bwareaopen(test_img_hsv, 50);
                test_img_hsv = im2double(test_img_hsv);
            elseif modV >= 0 && modV <= 0.05 % regular BG
                M_H =(H>=0 & H<=0);
                test_img_hsv = M_H;
                test_img_hsv = ~test_img_hsv;
                test_img_hsv = bwareaopen(test_img_hsv, 50);
                test_img_hsv = im2double(test_img_hsv);
            elseif modV >= 0.1 && modV <= 0.15 && modH >= 0.12 % BG 6 e 19
                strange_BG = 1; % special limits for this BG
                M_H =(H>=0.06 & H<=0.168);
                M_S =(S>=0.0 & S<=1.0);
                M_V =(V>=0.000 & V<=0.244);
                test_img_hsv = M_H & M_S & M_V;
                test_img_hsv = ~test_img_hsv;
                test_img_hsv = bwareaopen(test_img_hsv, 100);
                test_img_hsv = im2double(test_img_hsv);
            elseif modV > 0.15 && modV <= 0.2 && modS == 1 && modH >= 0.64 % BG 7
%                 gray_img = im2gray(test_img);
%                 adjust_img = imadjust(gray_img, [0.1 0.2]);
%                 test_img_hsv = adjust_img;
%                 BW = imbinarize(test_img_hsv);
%                 se = strel('disk',2);
%                 BW = imclose(BW, se);
%                 test_img_hsv = BW;
%                 test_img_hsv = im2double(test_img_hsv);
                M_H =(H>=0.627 & H<=0.702);
                M_S =(S>=0.0 & S<=1.0);
                M_V =(V>=0.000 & V<=0.244);
                test_img_hsv = M_H & M_S & M_V;
                test_img_hsv = ~test_img_hsv;
                test_img_hsv = bwareaopen(test_img_hsv, 50);
                test_img_hsv = im2double(test_img_hsv);
            elseif modV > 0.09 && modH > 0.86 % BG 9 e 22
                M_H =(H>=0.159 | H<=0.002);
                M_S =(S>=0 & S<=1);
                M_V =(V>=0.0 & V<=0.16);
                test_img_hsv = M_H & M_S & M_V;
                test_img_hsv = ~test_img_hsv;
                test_img_hsv = bwareaopen(test_img_hsv, 100);
                test_img_hsv = im2double(test_img_hsv);
            elseif modV > 0.15 && modH > 0.64 % BG 10 e 23
                M_H =(H>=0.163 & H<=0.955);
                M_S =(S>=0 & S<=1);
                M_V =(V>=0.046 & V<=0.351);
                test_img_hsv = M_H & M_S & M_V;
                test_img_hsv = ~test_img_hsv;
                test_img_hsv = bwareaopen(test_img_hsv, 50);
                test_img_hsv = im2double(test_img_hsv);
            elseif modV == 1 && modS >= 0.1 && modH >= 0.16 % BG 11 
%                 gray_img = im2gray(test_img);
%                 adjust_img = imadjust(gray_img, [0.9 1.0]);
%                 adjust_img = ~adjust_img;
%                 adjust_img = im2double(adjust_img);
%                 test_img_hsv = adjust_img;
                M_H =(H>=0.131 | H<=0.020);
                M_S =(S>=0.082 & S<=0.154);
                M_V =(V>=0.897 & V<=1.0);
                test_img_hsv = M_H & M_S & M_V;
                test_img_hsv = ~test_img_hsv;
                test_img_hsv = bwareaopen(test_img_hsv, 50);
                test_img_hsv = im2double(test_img_hsv);
            elseif modV >=0.86 % BG 27
                M_H =(H>=0.2 & H<=0.3);
                test_img_hsv = M_H;
                test_img_hsv = ~test_img_hsv;
                test_img_hsv = im2double(test_img_hsv);
            end

            BW = imbinarize(test_img_hsv);
            se = strel('disk',1);
            BW = imclose(BW, se);

            BW = bwareaopen(BW, 30);
            [LLT, NNT] = bwlabel(BW);

%                figure(2); imshow(BW)
    
            
            for i=1:NNT
                try   
                    % reset flags
                    cookie_OK = 0;

                    % extract sub images
                    sub_img = (LLT == i);
                    [xt,yt] = find(sub_img);
                    regions = sub_img(min(xt):max(xt), min(yt):max(yt));
                    regions_gray = test_img_gray(min(xt):max(xt), min(yt):max(yt));
                    sub_img_to_process = regions;
                    sub_img_to_process_gray = regions_gray;
                    sub_img_to_process = bwmorph(sub_img_to_process, 'close');

                    % x and y are the center of the cookie
                    y = (min(xt)+max(xt))/2;
                    x = (min(yt)+max(yt))/2;
                                           
                    % ******* START PROCESSING ******** %
                    [h, w, d] = size(sub_img_to_process); % height, width, dimension

                    if h*w < 1000 % ignore small imgs
                        continue
                    end

                    if debug_mode == true
%                         figure(3); imshow(sub_img_to_process)
                        tot_cookies = tot_cookies + 1;
                        figure(200);imshow(test_img);
                        hold on;
                        plot(x,y,'*b', 'MarkerSize', 50);
                        hold off
                    end

                    % find cookies on outskirts
                    % add the width/2 or the high/2 to the center (x,y) and see if it
                    % matchs to the size of the image to test
                    if x-w/2 < w_t*0.001 || x+w/2 > w_t*0.999 || y-h/2 < h_t*0.001 || y+h/2 > h_t*0.999
                        ObjBord = ObjBord + 1;
                        continue
                    end

                    %  ********* see what type of cookie it is ********* %
                    S_gray = regionprops(sub_img_to_process,sub_img_to_process_gray,{'PixelValues', 'MeanIntensity'}); % properties in gray scale
                    S = regionprops(sub_img_to_process,'Circularity','Solidity','Eccentricity', 'Extent', 'MinFeretProperties', 'MaxFeretProperties'); % properties in binary
                    % props in binary
                    cir = S.Circularity;
                    sol = S.Solidity;
                    ecc = S.Eccentricity;
                    ext = S.Extent;
                    % props in gray
                    S_gray.StandardDeviation = std(double(S_gray.PixelValues));
                    std_dev = S_gray.StandardDeviation;

                    % array with all properties
                    props_test = [cir sol ecc ext std_dev];
                    res = '---'; % reset result
                    gray_mean = mean(mean(sub_img_to_process_gray)); % mean of gray values
                    mean_inten = S_gray.MeanIntensity;

                    if debug_mode == 1
                        props_test = [cir sol ecc ext std_dev]
                        gray_mean = mean(mean(sub_img_to_process_gray))
                        mean_inten = S_gray.MeanIntensity
                    end
                    
                    % calculate mahal values for each cookie
                    mahal_beurre_1 = mahal(props_test, beurre_1);
                    mahal_beurre_2 = mahal(props_test, beurre_2);
                    mahal_choco_1 = mahal(props_test, choco_1);
                    mahal_choco_2 = mahal(props_test, choco_2);
                    mahal_confit_1 = mahal(props_test, confit_1);
                    mahal_confit_2 = mahal(props_test, confit_2);
                    mahal_craker_1 = mahal(props_test, craker_1);
                    mahal_craker_2 = mahal(props_test, craker_2);
                    mahal_fan_1 = mahal(props_test, fan_1);
                    mahal_fan_2 = mahal(props_test, fan_2);
                    mahal_ginger_1 = mahal(props_test, ginger_1);
                    mahal_ginger_2 = mahal(props_test, ginger_2);
                    mahal_lotus_1 = mahal(props_test, lotus_1);
                    mahal_lotus_2 = mahal(props_test, lotus_2);
                    mahal_maria_1 = mahal(props_test, maria_1);
                    mahal_maria_2 = mahal(props_test, maria_2);
                    mahal_oreo_1 = mahal(props_test, oreo_1);
                    mahal_oreo_2 = mahal(props_test, oreo_2);
                    mahal_palmier_1 = mahal(props_test, palmier_1);
                    mahal_palmier_2 = mahal(props_test, palmier_2);
                    mahal_parijse_1 = mahal(props_test, parijse_1);
                    mahal_parijse_2 = mahal(props_test, parijse_2);
                    mahal_sugar_1 = mahal(props_test, sugar_1);
                    mahal_sugar_2 = mahal(props_test, sugar_2);
                    mahal_wafer_1 = mahal(props_test, wafer_1);
                    mahal_wafer_2 = mahal(props_test, wafer_2);
                    mahal_zebra_1 = mahal(props_test, zebra_1);
                    mahal_zebra_2 = mahal(props_test, zebra_2);

                    % find which cookie it is using the mahal result %
                    if strange_BG == 0
                        if mahal_beurre_1 < 9.4 || mahal_beurre_2 < 14.8
                            beurre = beurre + 1;
                            cookie_OK = 1;
                            res = 'beurre';
                    
                        elseif mahal_choco_1 < 18.3 || mahal_choco_2 < 10.4 % mahal_choco_1 < 7.2 ou 10.6
                            choco = choco + 1;
                            cookie_OK = 1;
                            res = 'choco';
                    
                        elseif mahal_confit_1 < 16.7 || mahal_confit_2 < 11.9
                            confit = confit + 1;
                            cookie_OK = 1;
                            res = 'confit';
                    
                        elseif mahal_craker_1 < 12.4 && gray_mean > 0.4 || mahal_craker_2 < 13.4
                            cracker = cracker + 1;
                            cookie_OK = 1;
                            res = 'cracker';
                    
                        elseif mahal_fan_1 < 15.7 || mahal_fan_2 < 16.3
                            fan = fan + 1;
                            cookie_OK = 1;
                            res = 'fan';
                    
                        elseif mahal_ginger_1 < 12.9 || mahal_ginger_2 < 16.7
                            ginger = ginger + 1;
                            cookie_OK = 1;
                            res = 'ginger';
                    
                        elseif mahal_lotus_1 < 16 && cir > 0.6 && mean_inten > 0.479 || mahal_lotus_2 < 10.2 % && mean_inten > 0.55
                            lotus = lotus + 1;
                            cookie_OK = 1;
                            res = 'lotus';
                    
                        elseif mahal_maria_1 < 13 || mahal_maria_2 < 11.3 && gray_mean > 0.40
                            maria = maria + 1;
                            cookie_OK = 1;
                            res = 'maria';
                    
                        elseif mahal_oreo_1 < 14.8 || mahal_oreo_2 < 11.1
                            oreo = oreo + 1;
                            cookie_OK = 1;
                            res = 'oreo';
                    
                        elseif mahal_palmier_1 < 11.8 || mahal_palmier_2 < 13.1
                            palmier = palmier + 1;
                            cookie_OK = 1;
                            res = 'palmier';
                    
                        elseif mahal_parijse_1 < 16.1 || mahal_parijse_2 < 15.5 && cir > 0.7 && mean_inten < 0.61
                            parijse = parijse + 1;
                            cookie_OK = 1;
                            res = 'parijse';
                    
                        elseif mahal_sugar_1 < 16.3 || mahal_sugar_2 < 11.6
                            sugar = sugar + 1;
                            cookie_OK = 1;
                            res = 'sugar';
                    
                        elseif mahal_wafer_1 < 11.3 || mahal_wafer_2 < 13.5 && ecc > 0.83 && mean_inten > 0.2
                            wafer = wafer + 1;
                            cookie_OK = 1;
                            res = 'wafer';
                    
                        elseif mahal_zebra_1 < 15.1 || mahal_zebra_2 < 14.9
                            zebra = zebra + 1;
                            cookie_OK = 1;
                            res = 'zebra';
                    
                        end
                    
                        if strcmp(res, 'cracker')
                            if mahal_maria_2 < mahal_craker_1 && cir > 0.9
                                res = 'maria';
                                maria = maria + 1;
                                cracker = cracker - 1;
                            end
                        end
                    
                        if strcmp(res, 'lotus')
                            if mahal_wafer_2 < mahal_lotus_1
                                res = 'wafer';
                                wafer = wafer + 1;
                                lotus = lotus - 1;
                            end
                        end
                    
                        if strcmp(res, 'oreo')
                            if mahal_sugar_1 < mahal_oreo_1 || gray_mean > 0.5
                                res = 'sugar';
                                sugar = sugar + 1;
                                oreo = oreo - 1;
                            end
                        end
                    end

                    if strange_BG == 1 % special limits for background 6 and 19
                       
                        if mahal_beurre_1 < 64.2 || mahal_beurre_2 < 38.3
                            beurre = beurre + 1;
                            cookie_OK = 1;
                            res = 'beurre';

                        elseif mahal_choco_1 < 45.3 || mahal_choco_2 < 147.1 && gray_mean < 0.47 && gray_mean > 0.46
                            choco = choco + 1;
                            cookie_OK = 1;
                            res = 'choco';

                        elseif mahal_confit_1 < 36.9 || mahal_confit_2 < 11.9 && gray_mean < 0.5
                            confit = confit + 1;
                            cookie_OK = 1;
                            res = 'confit';

                        elseif mahal_craker_1 < 43.1 && gray_mean > 0.4 || mahal_craker_2 < 32.3
                            cracker = cracker + 1;
                            cookie_OK = 1;
                            res = 'cracker';

                        elseif mahal_fan_1 < 14.6 || mahal_fan_2 < 47.4
                            fan = fan + 1;
                            cookie_OK = 1;
                            res = 'fan';

                        elseif mahal_ginger_1 < 12.9 || mahal_ginger_2 < 27.3
                            ginger = ginger + 1;
                            cookie_OK = 1;
                            res = 'ginger';

                        elseif mahal_lotus_1 < 31 && cir > 0.6 || mahal_lotus_2 < 10.2
                            if mean_inten < 0.48 || mean_inten > 0.49
                                lotus = lotus + 1;
                                cookie_OK = 1;
                                res = 'lotus';
                            end

                        elseif mahal_maria_1 < 46.5 || mahal_maria_2 < 11.3 && gray_mean > 0.40
                            maria = maria + 1;
                            cookie_OK = 1;
                            res = 'maria';

                        elseif mahal_oreo_1 < 55.4 && gray_mean < 0.13 || mahal_oreo_2 < 580.8 && gray_mean < 0.21
                            oreo = oreo + 1;
                            cookie_OK = 1;
                            res = 'oreo';

                        elseif mahal_palmier_1 < 25.9 || mahal_palmier_2 < 13.1
                            palmier = palmier + 1;
                            cookie_OK = 1;
                            res = 'palmier';

                        elseif mahal_parijse_1 < 16.3 || mahal_parijse_2 < 15.6 && cir > 0.69
                            parijse = parijse + 1;
                            cookie_OK = 1;
                            res = 'parijse';

                        elseif mahal_sugar_1 < 65 || mahal_sugar_2 < 101
                            sugar = sugar + 1;
                            cookie_OK = 1;
                            res = 'sugar';

                        elseif mahal_wafer_1 < 11.3 || mahal_wafer_2 < 13.5 && ecc > 0.83
                            wafer = wafer + 1;
                            cookie_OK = 1;
                            res = 'wafer';

                        elseif mahal_zebra_1 < 50.4 || mahal_zebra_2 < 14.9
                            zebra = zebra + 1;
                            cookie_OK = 1;
                            res = 'zebra';

                        end

                        if strcmp(res, 'lotus')
                            if mahal_wafer_2 < mahal_lotus_1 && mahal_wafer_2 < 20 && gray_mean > 0.4
                                res = 'wafer';
                                wafer = wafer + 1;
                                lotus = lotus - 1;
                            end
                        end

                        if strcmp(res, 'cracker')
                            if mahal_sugar_1 < mahal_craker_1
                                res = 'sugar';
                                sugar = sugar + 1;
                                cracker = cracker - 1;
                            end
                        end
                    end

                    if cookie_OK == 1
                        ObjOk = ObjOk + 1;
                    else
                        ObjPart = ObjPart + 1;
                    end

                    if debug_mode == 1
                        str = sprintf('Cookie: %s', res); xlabel(str);
                        hold off
                    end

                catch e %e is an MException struct
                    fprintf(1,'\n%s',e.identifier);
                    fprintf(1,'\n%s',e.message);
                end
            end
    
            % ****** FOR LOOP NNT ENDS HERE ****** %
       
            if debug_mode == 1
                disp("FILE COUNT: " + file)
                disp(tot_cookies)
            end
    
            % write output file tp1_104580.txt
            file = fopen(['tp2_' num2str(NumMec) '.txt'], 'a');
            text_line = strcat(num2str(NumMec),',',num2str(NumSeq),',',num2str(NumImg),',',num2str(ObjBord),',',num2str(ObjPart),',',num2str(ObjOk),',',num2str(beurre) ...
                ,',',num2str(choco),',',num2str(confit),',',num2str(cracker),',',num2str(fan),',',num2str(ginger) ...
                ,',',num2str(lotus),',',num2str(maria),',',num2str(oreo),',',num2str(palmier),',',num2str(parijse) ...
                ,',',num2str(sugar),',',num2str(wafer),',',num2str(zebra));
            fprintf(file, text_line);
            fprintf(file, '\n');
            fclose(file);
        end
    catch e
        fprintf(1,'\n%s',e.identifier);
        fprintf(1,'\n%s',e.message);
    end
    % **************************** MAIN FOR LOOP ENDS HERE **************************** %
end
